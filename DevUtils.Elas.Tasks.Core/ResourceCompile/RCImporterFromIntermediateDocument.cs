using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using DevUtils.Elas.Tasks.Core.IO.Extensions;
using DevUtils.Elas.Tasks.Core.Loyc;
using DevUtils.Elas.Tasks.Core.Loyc.Extensions;
using DevUtils.Elas.Tasks.Core.Loyc.IO;
using DevUtils.Elas.Tasks.Core.Xliff;
using DevUtils.Elas.Tasks.Core.Xliff.Extensions;

namespace DevUtils.Elas.Tasks.Core.ResourceCompile
{
	sealed class RCImporterFromIntermediateDocument : RCImportExportParser
	{
		class RCWriterInfo : IDisposable
		{
			public string OutFile { get; private set; }
			public StreamWriter Stream { get; private set; }
			public XliffUnitCollection UnitCollection { get; set; }

			public XliffFile XliffFile
			{
				get
				{
					var ret = Enumerable.Repeat(UnitCollection.Owner, 1)
					                    .Concat(UnitCollection.Owner.SelectParent())
					                    .OfType<XliffFile>()
					                    .First();

					return ret;
				}
			}

			public RCWriterInfo(XliffFile xliffFile, string outFile)
			{
				OutFile = outFile;
				UnitCollection = xliffFile.Units;
				Stream = new StreamWriter(outFile, false, Encoding.Unicode);
			}

			#region Implementation of IDisposable

			public void Dispose()
			{
				Stream.Dispose();
			}

			#endregion
		}

		private int _restPosition;
		private char[] _copyBuffer;
		private string _currentRelativePath;

		private readonly List<RCWriterInfo> _writerInfos = new List<RCWriterInfo>();

		public RCImporterFromIntermediateDocument()
			: this(new RCLexer())
		{
		}

		private RCImporterFromIntermediateDocument(RCLexer lexer) 
			: base(lexer)
		{
		}

		private void Copy(int dataOffset, int count)
		{
			if (count == 0)
			{
				return;
			}

			if (_copyBuffer == null || _copyBuffer.Length < count)
			{
				_copyBuffer = new char[count];
			}

			Lexer.CharSource.Read(_copyBuffer, dataOffset, 0, count);

			foreach (var item in _writerInfos)
			{
				item.Stream.Write(_copyBuffer, 0, count);
			}
			
		}

		private void CopyRest(int position)
		{
			if (_restPosition != -1)
			{
				Copy(_restPosition, position - _restPosition);
				_restPosition = position;
			}
		}

		public void Import(IEnumerable<RCImportItemInfo> info)
		{
			foreach (var item in info.GroupBy(g => Tuple.Create(g.XliffFile.Original.ToLower(), Path.GetDirectoryName(g.OutFile).ToLower())))
			{
				try
				{
					_writerInfos.Clear();

					if (!item.Any())
					{
						continue;
					}
					try
					{
						foreach (var item2 in item)
						{
							Directory.CreateDirectory(Path.GetDirectoryName(item2.OutFile));

							var winfo = new RCWriterInfo(item2.XliffFile, item2.OutFile);

							_writerInfos.Add(winfo);
						}

						Write("// This file was automatically generated by Elas.");
						WriteNewLine();
						Write("//");
						WriteNewLine();

						foreach (var item2 in _writerInfos)
						{
							var lcid = item2.XliffFile.TargetLanguage.LCID;
							var p = lcid & 0x3ff;
							var s = lcid >> 10;

							item2.Stream.Write("LANGUAGE {0}, {1}", p, s);
							item2.Stream.Write(item2.Stream.NewLine);
						}

						using (var file = File.OpenRead(item.Key.Item1))
						{
							_restPosition = -1;
							Lexer.CharSource = new StreamCharSource(file);
							ValidSourceCultures = item.Select(s => s.XliffFile.SourceLanguage).Distinct().ToArray();
							_currentRelativePath = Path.GetDirectoryName(new FileInfo(item.First().OutFile).GetRelativePath(Path.GetFullPath(item.Key.Item1)));

							Parse();
						}
					}
					finally
					{
						foreach (var item3 in _writerInfos)
						{
							item3.Dispose();
						}
						_writerInfos.Clear();
					}
				}
				catch (Exception)
				{
					foreach (var item3 in _writerInfos)
					{
						new FileInfo(item3.OutFile).QuietDelete();
					}
					throw;
				}
			}
		}

		private void Write(string data)
		{
			foreach (var item in _writerInfos)
			{
				item.Stream.Write(data);
			}
		}

		private void WriteNewLine()
		{
			foreach (var item in _writerInfos)
			{
				item.Stream.Write(item.Stream.NewLine);
			}
		}

		#region Overrides of RCParser

		protected override Token<RCTokenType> OnStringTable(Token<RCTokenType> stringTable)
		{
			_restPosition = stringTable.StartIndex;

			var ret = base.OnStringTable(stringTable);

			var pos = ret.StartIndex + ret.Length;

			if (IsValidCurrentCulture)
			{
				CopyRest(pos);
				WriteNewLine();
			}

			_restPosition = -1;

			return ret;
		}

		private static void WriteContent(XliffTransUnit tu, TextWriter stream, string @default)
		{
			if (tu != null && tu.IsTranslated())
			{
				stream.Write(tu.Target.Content);
				return;
			}

			stream.Write(@default);
		}

		protected override void OnStringTableEntry(Token<RCTokenType> tokenId, Token<RCTokenType> tokenText)
		{
			if (!IsValidCurrentCulture)
			{
				return;
			}

			CopyRest(tokenText.StartIndex + 1);

			var id = Lexer.CharSource.Substring(tokenId);
			var text = ExtractResourceString(tokenText);

			foreach (var item in _writerInfos)
			{
				var tu = item.UnitCollection != null ? item.UnitCollection.GetTransUnitByCompositeId(id) : null;
				WriteContent(tu, item.Stream, text);
			}
			_restPosition = tokenText.StartIndex + (tokenText.Length - 1);
		}

		protected override Token<RCTokenType> OnMenuResource(Token<RCTokenType> tokenMenuId)
		{
			_restPosition = tokenMenuId.StartIndex;

			var menuId = Lexer.CharSource.Substring(tokenMenuId);

			var index = 0;
			var prefUC = new XliffUnitCollection[_writerInfos.Count];

			foreach (var item in _writerInfos)
			{
				prefUC[index++] = item.UnitCollection;
				var group = item.UnitCollection.GetGroupByCompositeId(menuId);
				item.UnitCollection = group != null ? group.Units : null;
			}

			var ret = base.OnMenuResource(tokenMenuId);

			index = 0;

			foreach (var item in _writerInfos)
			{
				item.UnitCollection = prefUC[index++];
			}

			var pos = ret.StartIndex + ret.Length;

			if (IsValidCurrentCulture)
			{
				CopyRest(pos);
				WriteNewLine();
			}

			_restPosition = -1;

			return ret;
		}

		protected override void OnPopupEntryBody(Token<RCTokenType> tokenResourceString)
		{
			if (!IsValidCurrentCulture)
			{
				base.OnPopupEntryBody(tokenResourceString);
				return;
			}

			CopyRest(tokenResourceString.StartIndex + 1);

			var popupResourceString = ExtractResourceString(tokenResourceString);
			var id = StringToId(popupResourceString);

			var popupRefId = id + ".$PopupRef";

			var index = 0;
			var prefUC = new XliffUnitCollection[_writerInfos.Count];

			foreach (var item in _writerInfos)
			{
				prefUC[index++] = item.UnitCollection;

				var group = item.UnitCollection != null ? item.UnitCollection.GetGroup(id) : null;
				item.UnitCollection = group != null ? group.Units : null;
				var tu = item.UnitCollection != null ? item.UnitCollection.GetTransUnit(popupRefId) : null;
				WriteContent(tu, item.Stream, popupResourceString);
			}

			_restPosition = tokenResourceString.StartIndex + (tokenResourceString.Length - 1);

			base.OnPopupEntryBody(tokenResourceString);

			index = 0;

			foreach (var item in _writerInfos)
			{
				item.UnitCollection = prefUC[index++];
			}
		}

		protected override void OnMenuItem(Token<RCTokenType> tokenId, Token<RCTokenType> tokenText)
		{
			if (!IsValidCurrentCulture)
			{
				return;
			}

			CopyRest(tokenText.StartIndex + 1);

			var id = Lexer.CharSource.Substring(tokenId);
			var text = ExtractResourceString(tokenText);

			foreach (var item in _writerInfos)
			{
				var tu = item.UnitCollection != null ? item.UnitCollection.GetTransUnit(id) : null;
				WriteContent(tu, item.Stream, text);
			}

			_restPosition = tokenText.StartIndex + (tokenText.Length - 1);
		}

		protected override Token<RCTokenType> OnDialogResource(Token<RCTokenType> tokenDialogId)
		{
			_restPosition = tokenDialogId.StartIndex;

			var dialogId = Lexer.CharSource.Substring(tokenDialogId);

			var index = 0;
			var prefUC = new XliffUnitCollection[_writerInfos.Count];

			foreach (var item in _writerInfos)
			{
				prefUC[index++] = item.UnitCollection;
				var group = item.UnitCollection.GetGroupByCompositeId(dialogId);
				item.UnitCollection = group != null ? group.Units : null;
			}

			var ret = base.OnDialogResource(tokenDialogId);

			index = 0;

			foreach (var item in _writerInfos)
			{
				item.UnitCollection = prefUC[index++];
			}

			var pos = ret.StartIndex + ret.Length;

			if (IsValidCurrentCulture)
			{
				CopyRest(pos);
				WriteNewLine();
			}

			_restPosition = -1;

			return ret;
		}

		protected override void OnDialogControl(Token<RCTokenType> tokenControlType, Token<RCTokenType> tokenContent, Token<RCTokenType> tokenId)
		{
			if (!IsValidCurrentCulture)
			{
				return;
			}

			var id = Lexer.CharSource.Substring(tokenId);
			var content = ExtractResourceString(tokenContent);

			id = GetDialogControlId(id, tokenControlType.Type, content);

			CopyRest(tokenContent.StartIndex + 1);

			foreach (var item in _writerInfos)
			{
				var tu = item.UnitCollection != null ? item.UnitCollection.GetTransUnit(id) : null;
				WriteContent(tu, item.Stream, content);
			}

			_restPosition = tokenContent.StartIndex + (tokenContent.Length - 1);
		}

		protected override void OnPreprocessor(Token<RCTokenType> tokenId)
		{
			CopyRest(tokenId.StartIndex);

			var pp = Lexer.CharSource.Substring(tokenId);
			if (pp.StartsWith("#pragma"))
			{
				return;
			}

			if (pp.StartsWith("#include"))
			{
				var dqIndex1 = pp.IndexOf('\"');
				if (dqIndex1 != -1)
				{
					var dqIndex2 = pp.IndexOf('\"', dqIndex1 + 1);
					if (dqIndex2 != -1)
					{
						++dqIndex1;
						var path = pp.Substring(dqIndex1, dqIndex2 - dqIndex1);
						var newPath = Path.Combine(_currentRelativePath, path);

						var currentOutputPath = Path.GetDirectoryName(_writerInfos.First().OutFile);

						path = Path.Combine(currentOutputPath, newPath);
						if (File.Exists(path))
						{
							pp = pp.Remove(dqIndex1, dqIndex2 - dqIndex1).Insert(dqIndex1, newPath);
						}
					}
				}
			}

			Write(pp);
			WriteNewLine();

			if (_restPosition != -1)
			{
				_restPosition = tokenId.StartIndex + tokenId.Length;
			}
		}

		#endregion
	}
}
